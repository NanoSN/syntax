library token;

/// Represents a token definition to the parser.
class TokenDefinition {
  final int hashCode;
  static int _HASH_COUNTER = 0;
  final String value;

  // TODO: change the type to Token once figured out how lib loading works.
  final type;
  TokenDefinition({value, type}):
    hashCode = ++_HASH_COUNTER,
    this.value = value,
    this.type = type;

  operator ==(o) {
    // TODO: change this to actually test type equlity.
    if(type != null) return '${type.runtimeType}' == '${o.runtimeType}';
    return value == o.value;
  }
  toString() => '$runtimeType(value:"$value",type:"$type"';
}



/// Represents a token instance generated by lexer.
class Token {
  final int hashCode;
  static int _HASH_COUNTER = 0;
  String value;
  int position;
  Token([this.value, this.position]): hashCode = ++_HASH_COUNTER;
  toString() {
    if(value == null)
      return '$runtimeType: "$value":$position';
    return '$runtimeType: "$value"(${value.length}):$position';
  }
  operator ==(o) => value == o.value && position == o.position;
}

/// End of File [Token]
class EOF extends Token {}
